name: Docker Build and Release
on: [ push ]
env:
#### An dieser Stelle müssen eure persönlichen Umgebungsvariablen eingetragen werden
  # Tip: Die Token/der API-Key werden als Secrets in den Repository-Settings eingetragen und hier referenziert.
  APP_NAME: "pet-clinic-wg" #<-- hier wird der Name euer Heroku-App eingetragen
  HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }} 
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
jobs:
  compile:
    name: Compile
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: 11
        cache: maven
    #### AUFGABE 2: SONAR
      # hier kommt die Konfiguration der Sonar-Analyse rein
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=wgruel_pet-clinic
      
  
      - name: Compile, build and push
        run: |
          heroku container:login 
          mvn package
          docker build --tag registry.heroku.com/${APP_NAME}/web -f Dockerfile .
          docker push registry.heroku.com/${APP_NAME}/web
      - name: Release
        run: |
          heroku container:login 
          heroku stack:set container --app ${APP_NAME}
          heroku container:release web --app ${APP_NAME}
